// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (id, feed_id, user_id, created_at, updated_at) 
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    ) 
    RETURNING id, feed_id, user_id, created_at, updated_at
)
SELECT 
    inserted_feed_follow.id, inserted_feed_follow.feed_id, inserted_feed_follow.user_id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, 
    users.name AS user_name, 
    feeds.name AS feed_name
FROM inserted_feed_follow
INNER JOIN users on inserted_feed_follow.user_id = users.id
INNER JOIN feeds on inserted_feed_follow.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	FeedID    uuid.NullUUID
	UserID    uuid.NullUUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	FeedID    uuid.NullUUID
	UserID    uuid.NullUUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.FeedID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowForUser = `-- name: DeleteFeedFollowForUser :exec

DELETE FROM feed_follows
USING feeds
WHERE feed_follows.user_id = $1 
AND feeds.url = $2
`

type DeleteFeedFollowForUserParams struct {
	UserID uuid.NullUUID
	Url    string
}

func (q *Queries) DeleteFeedFollowForUser(ctx context.Context, arg DeleteFeedFollowForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowForUser, arg.UserID, arg.Url)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many

SELECT 
    feeds.name AS feed_name,
    users.name AS user_name
FROM feed_follows
INNER JOIN users on feed_follows.user_id = $1
INNER JOIN feeds on feed_follows.feed_id = feeds.id
`

type GetFeedFollowsForUserRow struct {
	FeedName string
	UserName string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.NullUUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.FeedName, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
